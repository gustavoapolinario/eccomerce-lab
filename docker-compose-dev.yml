services:

  front-end:
    image: node:20
    working_dir: /app
    environment:
      VUE_APP_BASE_URL: http://localhost:3000/
      PORT: 8080
    ports:
      - "8080:8080"
    volumes:
      - ./front-end/:/app/
    command: [ "npm", "run", "serve" ]

# Test buy product:
# curl localhost:3000/products/
# curl localhost:3000/products/$(curl -s localhost:3000/products/ | jq -r '.[0]._id')
  product-api:
    image: node:20
    working_dir: /app
    environment:
      PORT: 3000
      MONGODB_ENDPOINT: mongo
      MONGODB_PORT: 27017
      MONGODB_USERNAME: product-api
      MONGODB_PASSWORD: product-api-password
      MONGODB_DATABASE: products
      REDIS_ENDPOINT: redis
      REDIS_PORT: 6379
      REDIS_USERNAME: default
      REDIS_PASSWORD: your_redis_password
    ports:
      - "3000:3000"
    volumes:
      - ./product-api/:/app/
    command: [ "npm", "run", "dev" ]
    depends_on:
      - mongo
      - redis

# Test buy product:
# curl -X POST localhost:3001/buy/$(curl -s localhost:3000/products/ | jq -r '.[0]._id')
  buy-api:
    image: node:20
    working_dir: /app
    environment:
      PORT: 3001
      PRODUCT_API_URL: http://product-api:3000
      RABBITMQ_ENDPOINT: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: rabbitmq
      RABBITMQ_PASSWORD: rabbitmq-password
      REDIS_ENDPOINT: redis
      REDIS_PORT: 6379
      REDIS_USERNAME: default
      REDIS_PASSWORD: your_redis_password
    ports:
      - "3001:3001"
    volumes:
      - ./buy-api/:/app/
    command: [ "npm", "run", "dev" ]
    depends_on:
      - rabbitmq
      - redis

  buy-job:
    image: node:20
    working_dir: /app
    environment:
      PORT: 3002
      RABBITMQ_ENDPOINT: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: rabbitmq
      RABBITMQ_PASSWORD: rabbitmq-password
      KAFKA_ENDPOINT: kafka
      KAFKA_PORT: 9092
    ports:
      - "3002:3002"
    volumes:
      - ./buy-job/:/app/
    command: [ "npm", "run", "dev" ]
    depends_on:
      - rabbitmq
      - kafka

  mongo:
    image: mongo
    restart: always
    volumes:
      - ./mongodb/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - mongo-data:/data/db

  redis:
    image: redis:latest
    command: ["redis-server", "--requirepass", "your_redis_password"]
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"   # RabbitMQ main port
      - "15672:15672" # RabbitMQ management plugin port
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq-password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq



  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # ALLOW_PLAINTEXT_LISTENER: yes

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "7070:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181



volumes:
  mongo-data:
  redis-data:
  rabbitmq_data:

networks:
  ecommercelab:
    driver: bridge
